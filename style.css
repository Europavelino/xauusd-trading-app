body {
  background: #0d0d0d;
  color: #eaeaea;
  font-family: 'Roboto', Arial, sans-serif;
  margin: 0;
  padding: 0;
}

h1 {
  background: linear-gradient(90deg, #// P≈ôep√≠n√°n√≠ z√°lo≈æek
function switchTab(tabId) {
  document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
  document.querySelectorAll('.content').forEach(c => c.classList.remove('active'));
  document.querySelector(`[onclick="switchTab('${tabId}')"]`).classList.add('active');
  document.getElementById(tabId).classList.add('active');
}

// ƒåas
function updateTime() {
  const now = new Date();
  document.getElementById("time").textContent =
    now.toLocaleString("cs-CZ", { timeZone:"Europe/Prague", weekday:"long", hour:"2-digit", minute:"2-digit", second:"2-digit" });
}
setInterval(updateTime,1000); updateTime();

// T√Ωdenn√≠ p≈ôehled
const days = ["Po","Ut","St","Ct","Pa","So","Ne"];
function renderWeek() {
  const now = new Date();
  const prg = new Date(now.toLocaleString("en-US",{ timeZone:"Europe/Prague" }));
  const di = prg.getDay();
  const box = document.getElementById("week");
  box.innerHTML="";
  days.forEach((d,i)=>{
    const js=(i+1)%7;
    const active=(di===js);
    box.innerHTML+=`
      <div class="week-box ${active?"active":""}">
        ${d}<br><span class="dot ${i<5?"green":"red"}"></span>
      </div>`;
  });
}
renderWeek();

// Seance
const sessions=[
  {name:"Asie", start:1, end:9},
  {name:"Lond√Ωn", start:9, end:17},
  {name:"New York", start:14, end:22}
];
function updateSessions(){
  const now=new Date();
  const h=parseInt(now.toLocaleString("en-GB",{ timeZone:"Europe/Prague", hour:"2-digit", hour12:false }));
  const m=parseInt(now.toLocaleString("en-GB",{ timeZone:"Europe/Prague", minute:"2-digit" }));
  const currentHour=h+m/60;
  const box=document.getElementById("sessions");
  box.innerHTML="";
  sessions.forEach(s=>{
    const on=(currentHour>=s.start && currentHour<s.end);
    let progress=0;
    if(on){ progress=( (currentHour-s.start)/(s.end-s.start) )*100; }
    const progressText = on ? `${progress.toFixed(0)} %` : `Mimo`;
    box.innerHTML+=`
      <div class="session-box ${on?"active":""}">
        <strong>${s.name}</strong><br>
        <small>${s.start}:00 - ${s.end}:00</small><br>
        ${progressText}
        <div class="progress"><div class="progress-fill" style="width:${progress}%;"></div></div>
      </div>`;
  });
}
setInterval(updateSessions,60000); updateSessions();

// Kalkulaƒçka
document.querySelectorAll("#calc input, #calc select").forEach(el=>el.addEventListener("input",updateCalc));
function updateCalc(){
  const capital=parseFloat(document.getElementById("capital").value)||0;
  const riskPct=parseFloat(document.getElementById("risk").value)||0;
  const sl=parseFloat(document.getElementById("sl").value);
  const tp=parseFloat(document.getElementById("tp").value);
  const entry=parseFloat(document.getElementById("entry").value);
  const type=document.getElementById("tradeType").value;
  if(!capital||!riskPct||isNaN(sl)||isNaN(tp)||isNaN(entry)) return;
  const pipSize=0.01, contractOz=100, pipValuePerLot=contractOz*pipSize;
  const slPips=Math.abs((entry-sl)/pipSize);
  const tpPips=Math.abs((tp-entry)/pipSize);
  const riskMoney=capital*(riskPct/100);
  const lotSize=riskMoney/(slPips*pipValuePerLot);
  const rrr=tpPips/slPips;
  const potentialLoss=slPips*pipValuePerLot*lotSize;
  const potentialProfit=tpPips*pipValuePerLot*lotSize;
  document.getElementById("calcResult").innerHTML=
    `Typ: ${type.toUpperCase()}<br>
     SL: ${slPips.toFixed(0)} pip≈Ø (${Math.abs(entry-sl).toFixed(2)} USD)<br>
     TP: ${tpPips.toFixed(0)} pip≈Ø (${Math.abs(tp-entry).toFixed(2)} USD)<br>
     RRR: ${rrr.toFixed(2)}<br>
     Lot: ${lotSize.toFixed(2)}<br>
     <span style="color:#e74c3c">Risk: -${potentialLoss.toFixed(2)} USD</span><br>
     <span style="color:#2ecc71">Zisk: +${potentialProfit.toFixed(2)} USD</span>`;
}

// Indik√°tory ‚Äì mock
function loadIndicators(){
  const demand=(3400+Math.random()*20).toFixed(2);
  const supply=(3500+Math.random()*20).toFixed(2);
  const trend=Math.random()>0.5?"BULLISH":"BEARISH";
  document.getElementById("indicatorsResult").innerHTML=`
    Trend: <span class="trend">${trend}</span><br>
    Demand: <span class="demand">${demand}</span><br>
    Supply: <span class="supply">${supply}</span>`;
}

// Fundament (pl√°novan√© ud√°losti)
const fundamentEvents = [
  {short:"NFP", full:"Nonfarm Payrolls", date:"2025-09-05T14:30:00"},
  {short:"CPI", full:"Consumer Price Index", date:"2025-09-11T14:30:00"},
  {short:"FED", full:"Fed Rate Decision", date:"2025-09-18T20:00:00"}
];

function renderFundament(){
  const prevBox=document.getElementById("fundamentPrev");
  const todayBox=document.getElementById("fundamentToday");
  const nextBox=document.getElementById("fundamentNext");
  prevBox.innerHTML=""; todayBox.innerHTML=""; nextBox.innerHTML="";

  const now=new Date();

  fundamentEvents.forEach((ev,i)=>{
    const start=new Date(ev.date);
    const end=new Date(start.getTime()+30*60000); // vliv 30 min
    let wait=0, effect=0, waitState="waiting", effectState="waiting";

    if(now<start){
      // ƒåek√°n√≠ do startu
      const diff=start-now;
      const total=1000*60*60*24; // 1 den
      wait=Math.max(0,Math.min(100,100-(diff/total*100)));
      effect=0;
    } else if(now>=start && now<=end){
      // Prob√≠h√° vliv
      wait=100;
      effect=((now-start)/(end-start))*100;
      effectState = effect<5 ? "effect-0-5" : "effect-5-30";
    } else {
      // Hotovo
      wait=100; effect=100;
      waitState="done"; effectState="done";
    }

    const html=`
      <div class="event-card ${waitState==="done"?"done":""}">
        <div class="event-short">${ev.short}</div>
        <div class="event-full">${ev.full}</div>
        <div class="event-time">üìÖ ${start.toLocaleDateString("cs-CZ",{weekday:"long",day:"2-digit",month:"2-digit",hour:"2-digit",minute:"2-digit"})}</div>
        <div>ƒåek√°n√≠:</div>
        <div class="progress ${waitState}">
          <div class="progress-fill" style="width:${wait.toFixed(0)}%">${wait.toFixed(0)}%</div>
        </div>
        <div>Vliv:</div>
        <div class="progress ${effectState}">
          <div class="progress-fill" style="width:${effect.toFixed(0)}%">${effect.toFixed(0)}%</div>
        </div>
      </div>`;
    
    if(i===0) prevBox.innerHTML+=html;
    else if(i===1) todayBox.innerHTML+=html;
    else nextBox.innerHTML+=html;
  });
}
setInterval(renderFundament,60000);
renderFundament();
ffd700, #ff8c00);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-size: 28px;
  text-align: center;
  margin: 20px 0;
}

/* Tabs */
.tabs {
  display: flex;
  justify-content: center;
  gap: 15px;
  margin-bottom: 20px;
  flex-wrap: wrap;
}
.tab {
  padding: 12px 24px;
  background: #1a1a1a;
  border-radius: 10px;
  cursor: pointer;
  transition: 0.3s;
}
.tab.active {
  background: #333;
  box-shadow: 0 0 12px rgba(255,215,0,0.5);
}

/* Content */
.content { display: none; padding: 10px; }
.content.active { display: block; }

/* Cards */
.card {
  background: rgba(20,20,20,0.9);
  border: 1px solid #333;
  border-radius: 12px;
  padding: 20px;
  margin: 15px auto;
  width: 90%;
  max-width: 600px;
  box-shadow: 0 0 20px rgba(0,0,0,0.6);
}
.small-card { padding: 10px; }

/* Dashboard */
.big-time {
  font-size: 26px;
  text-align: center;
  font-weight: bold;
  margin: 10px 0;
}

/* Week overview */
#week {
  display: flex;
  justify-content: center;
  gap: 12px;
  flex-wrap: wrap;
  margin-top: 10px;
}
.week-box {
  background: #1a1a1a;
  padding: 10px 12px;
  border-radius: 8px;
  text-align: center;
  min-width: 50px;
  font-size: 14px;
  border: 1px solid #333;
  transition: 0.2s;
}
.week-box.active {
  border: 1px solid #ffd700;
  box-shadow: 0 0 10px rgba(255,215,0,0.6);
  font-weight: bold;
}
.dot { height: 12px; width: 12px; border-radius: 50%; display:inline-block; }
.green { background:#0f0; } 
.red { background:#f00; }

/* Sessions */
#sessions {
  display: flex;
  justify-content: center;
  gap: 15px;
  flex-wrap: wrap;
  margin-top: 10px;
}
.session-box {
  background: #1a1a1a;
  padding: 12px 18px;
  border-radius: 8px;
  text-align: center;
  min-width: 140px;
  font-size: 14px;
  border: 1px solid #333;
  transition: 0.2s;
}
.session-box.active {
  border: 1px solid #2ecc71;
  box-shadow: 0 0 10px rgba(46,204,113,0.7);
  color: #2ecc71;
  font-weight: bold;
}

/* Kalkulaƒçka */
label { width:130px; display:inline-block; }
input, select {
  padding:10px;
  margin:6px 0;
  width:180px;
  border-radius:8px;
  border:none;
  background:#222;
  color:#fff;
  text-align:center;
  font-size:15px;
}
input:focus, select:focus { outline:none; box-shadow:0 0 6px #ffd700; }

.result { margin-top:15px; font-size:16px; line-height:1.6; }

/* Indik√°tory */
#indicators .result { margin-top:15px; font-size:16px; line-height:1.6; }
.demand { color:#2ecc71; font-weight:bold; }
.supply { color:#e74c3c; font-weight:bold; }
.trend { font-weight:bold; }

/* Fundament */
.fundament-section h3 {
  margin-top:20px;
  margin-bottom:10px;
  color:#ffd700;
}
.event-card {
  background:#1a1a1a;
  border:1px solid #333;
  border-radius:10px;
  padding:12px;
  margin-bottom:12px;
}
.event-short { font-weight:bold; font-size:18px; }
.event-full { font-size:14px; color:#aaa; margin-bottom:8px; }
.progress {
  margin-top:6px;
  width: 100%;
  height: 20px;
  background: #333;
  border-radius: 6px;
  overflow: hidden;
  text-align:center;
  color:#fff;
  font-size:12px;
  line-height:20px;
}
.progress-fill {
  height: 100%;
  transition: width 0.5s ease;
}
.waiting .progress-fill { background: linear-gradient(90deg,#3498db,#2980b9); }
.effect-0-5 .progress-fill { background: #e74c3c; }
.effect-5-30 .progress-fill { background: #f39c12; }
.done .progress-fill { background: #2ecc71; }

.event-card.done {
  opacity: 0.6;
}

/* Fundament ‚Äì Free den */
.event-card.free {
  border: 1px solid #2ecc71;
  background: rgba(46, 204, 113, 0.1);
  color: #2ecc71;
  font-weight: bold;
  text-align: center;
}
